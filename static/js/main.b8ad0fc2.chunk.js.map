{"version":3,"sources":["logo.svg","AudioVisualiser.js","AudioAnalyser.js","AudioVisualiserspect.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AudioVisualiser","props","canvas","React","createRef","this","draw","audioData","current","height","width","context","getContext","x","sliceWidth","length","lineWidth","strokeStyle","clearRect","beginPath","moveTo","y","lineTo","stroke","ref","Component","AudioAnalyser","state","Uint8Array","tick","bind","audioContext","window","AudioContext","webkitAudioContext","analyser","createAnalyser","dataArray","frequencyBinCount","source","createMediaStreamSource","audio","connect","rafId","requestAnimationFrame","getByteTimeDomainData","setState","cancelAnimationFrame","disconnect","App","toggleMicrophone","navigator","mediaDevices","getUserMedia","video","getTracks","forEach","track","stop","stopMicrophone","getMicrophone","className","onClick","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b8ad0fc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass AudioVisualiser extends Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const { audioData } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n    let x = 0;\n    const sliceWidth = (width * 1.0) / audioData.length;\n\n    context.lineWidth = 2;\n    context.strokeStyle = '#000000';\n    context.clearRect(0, 0, width, height);\n\n    context.beginPath();\n    context.moveTo(0, height / 2);\n    for (const item of audioData) {\n      const y = (item / 255.0) * height;\n      context.lineTo(x, y);\n      x += sliceWidth;\n    }\n    context.lineTo(x, height / 2);\n    context.stroke();\n  }\n\n  render() {\n    return <canvas width=\"300\" height=\"300\" ref={this.canvas} />;\n  }\n}\nexport default AudioVisualiser;","import React, { Component } from 'react';\nimport AudioVisualiser from './AudioVisualiser';\nimport AudioVisualiserspect from './AudioVisualiserspect';\n\nclass AudioAnalyser extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { audioData: new Uint8Array(0) };\n    this.tick = this.tick.bind(this);\n  }\n\n  componentDidMount() {\n    this.audioContext = new (window.AudioContext ||\n      window.webkitAudioContext)();\n    this.analyser = this.audioContext.createAnalyser();\n    this.dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n    this.source = this.audioContext.createMediaStreamSource(this.props.audio);\n    this.source.connect(this.analyser);\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  tick() {\n    this.analyser.getByteTimeDomainData(this.dataArray);\n    this.setState({ audioData: this.dataArray });\n    this.rafId = requestAnimationFrame(this.tick);\n  }\n\n  componentWillUnmount() {\n    cancelAnimationFrame(this.rafId);\n    this.analyser.disconnect();\n    this.source.disconnect();\n  }\n\n  render() {\n    return( \n      <div>\n      <AudioVisualiser audioData={this.state.audioData} />\n      <h1>Linear</h1>\n      </div>);\n  }\n}\n\nexport default AudioAnalyser;\n\n","import React, { Component } from 'react';\n\nclass AudioVisualiser extends Component {\n    \n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n  }\n\n  componentDidUpdate() {\n    this.draw();\n  }\n\n  draw() {\n    const background = \"rgba(0, 0, 0, 1)\";\n    const heatmap = [\"05000b\", \"05000b\", \"0a000a\", \"0a000a\", \"0e000f\", \"0e000f\", \"130014\", \"130014\", \"190018\", \"190018\", \"1e001e\", \"1e001e\", \"230022\", \"230022\", \"290029\", \"290029\", \"2e002e\", \"2e002e\", \"320033\", \"320033\", \"370037\", \"370037\", \"3d003d\", \"3d003d\", \"450046\", \"450046\", \"4e014e\", \"4e014e\", \"560157\", \"560157\", \"5f005e\", \"5f005e\", \"670167\", \"670167\", \"6f0070\", \"6f0070\", \"780179\", \"780179\", \"81017b\", \"81017b\", \"870278\", \"870278\", \"8d0272\", \"8d0272\", \"94036c\", \"94036c\", \"9a0467\", \"9a0467\", \"a00560\", \"a00560\", \"a8065a\", \"a8065a\", \"ad0753\", \"ad0753\", \"b4084d\", \"b4084d\", \"bb0a47\", \"bb0a47\", \"c10a40\", \"c10a40\", \"c60b38\", \"c60b38\", \"cc0c33\", \"cc0c33\", \"d30e2c\", \"d30e2c\", \"d90d26\", \"d90d26\", \"df0f1f\", \"df0f1f\", \"e61019\", \"e61019\", \"ec1213\", \"ec1213\", \"f3120d\", \"f3120d\", \"f91306\", \"f91306\", \"fc1601\", \"fc1601\", \"fe2000\", \"fe2000\", \"ff2a01\", \"ff2a01\", \"ff3501\", \"ff3501\", \"ff3f00\", \"ff3f00\", \"ff4b01\", \"ff4b01\", \"ff5500\", \"ff5500\", \"ff5f01\", \"ff5f01\", \"ff6901\", \"ff6901\", \"ff7300\", \"ff7300\", \"ff7f00\", \"ff7f00\", \"ff8901\", \"ff8901\", \"ff9400\", \"ff9400\", \"ff9f01\", \"ff9f01\", \"ffa900\", \"ffa900\", \"ffb401\", \"ffb401\", \"ffbd02\", \"ffbd02\", \"ffc303\", \"ffc303\", \"ffc704\", \"ffc704\", \"ffcb06\", \"ffcb06\", \"ffd009\", \"ffd009\", \"ffd30a\", \"ffd30a\", \"ffd70d\", \"ffd70d\", \"ffdb0d\", \"ffdb0d\", \"ffdf10\", \"ffdf10\", \"fee310\", \"fee310\", \"ffe713\", \"ffe713\", \"ffec15\", \"ffec15\", \"ffef17\", \"ffef17\", \"fff319\", \"fff319\", \"fff61b\", \"fff61b\", \"fffb1d\", \"fffb1d\", \"feff20\", \"feff20\", \"f9fb1f\", \"f9fb1f\", \"f3f71f\", \"f3f71f\", \"eff41f\", \"eff41f\", \"eaf01f\", \"eaf01f\", \"e5ed20\", \"e5ed20\", \"dee920\", \"dee920\", \"dae720\", \"dae720\", \"d5e320\", \"d5e320\", \"cfdf20\", \"cfdf20\", \"cbdc21\", \"cbdc21\", \"c5d720\", \"c5d720\", \"c1d521\", \"c1d521\", \"bad020\", \"bad020\", \"b5cd21\", \"b5cd21\", \"afc920\", \"afc920\", \"abc621\", \"abc621\", \"a6c220\", \"a6c220\", \"a1c021\", \"a1c021\", \"9bbc20\", \"9bbc20\", \"96b823\", \"96b823\", \"93b82a\", \"93b82a\", \"91b932\", \"91b932\", \"8ebb3c\", \"8ebb3c\", \"8bbb43\", \"8bbb43\", \"8abc4c\", \"8abc4c\", \"88bd54\", \"88bd54\", \"85bd5c\", \"85bd5c\", \"83be64\", \"83be64\", \"80bf6e\", \"80bf6e\", \"7dbf75\", \"7dbf75\", \"7bc07e\", \"7bc07e\", \"7ac187\", \"7ac187\", \"78c290\", \"78c290\", \"75c298\", \"75c298\", \"72c4a1\", \"72c4a1\", \"70c5aa\", \"70c5aa\", \"6ec4b2\", \"6ec4b2\", \"6cc5ba\", \"6cc5ba\", \"6ac7c3\", \"6ac7c3\", \"6ac6c6\", \"6ac6c6\", \"72cbcd\", \"72cbcd\", \"7aced1\", \"7aced1\", \"83d1d5\", \"83d1d5\", \"8ed5d7\", \"8ed5d7\", \"97d8da\", \"97d8da\", \"a0dcdd\", \"a0dcdd\", \"a9dfe1\", \"a9dfe1\", \"b3e3e5\", \"b3e3e5\", \"bee7e9\", \"bee7e9\", \"c6e9eb\", \"c6e9eb\", \"d0eef0\", \"d0eef0\", \"d9f1f3\", \"d9f1f3\", \"e3f5f7\", \"e3f5f7\", \"edf9fa\", \"edf9fa\", \"f6fcfd\", \"f6fcfd\", \"fdffff\", \"fdffff\"];\n\n    const { audioData } = this.props;\n    const canvas = this.canvas.current;\n    const height = canvas.height;\n    const width = canvas.width;\n    const context = canvas.getContext('2d');\n    const moveBy=1;\n  //  let x = 0;\n  //  const sliceWidth = (width * 1.0) / audioData.length;\n\n   // context.lineWidth = 2;\n  //  context.strokeStyle = '#000000';\n    context.fillStyle = background;\n\n    context.fillRect(0, 0, width, height);\n    context.drawImage(context.canvas,0,0,height,width,1,0,height,width);\n  //  context.beginPath();\n  //  context.moveTo(0, height / 2);\n    for (let i=0;i<audioData.length;i++) {\n      const mag=audioData[i];\n      //const y = (item / 255.0) * height;\n      context.fillStyle='#'+heatmap[mag];\n      context.fillRect(0,height-i,moveBy,1);\n    }\n    //context.lineTo(x, height / 2);\n    //context.stroke();\n  }\n\n  render() {\n    return <canvas width=\"300\" height=\"300\" ref={this.canvas} />;\n  }\n}\nexport default AudioVisualiser;","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AudioAnalyser from './AudioAnalyser';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      audio:null\n    };\n     this.toggleMicrophone = this.toggleMicrophone.bind(this);\n\n  }\n  async getMicrophone(){\n    const audio=await navigator.mediaDevices.getUserMedia(\n    {\n      audio:true,\n      video:false\n    });\n    this.setState({audio});\n  }\n  stopMicrophone(){\n    this.state.audio.getTracks().forEach(track=>track.stop());\n    this.setState({audio:null});\n  }\n    toggleMicrophone() {\n    if (this.state.audio) {\n      this.stopMicrophone();\n    } else {\n      this.getMicrophone();\n    }\n  }\n  render(){\n        return (\n      <div className=\"App\">\n        <div className=\"controls\">\n          <button onClick={this.toggleMicrophone}>\n            {this.state.audio ? 'Stop microphone' : 'Get microphone input'}\n          </button>\n        </div>\n        {this.state.audio ? <AudioAnalyser audio={this.state.audio} /> : ''}\n      </div>\n    );\n  }\n}\n/*function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}